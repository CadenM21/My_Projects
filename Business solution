# imports
import os
import requests
import json
from typing import List # Changed 'list' to 'List'
from dotenv import load_dotenv
from bs4 import BeautifulSoup
from IPython.display import Markdown, display, update_display
from openai import OpenAI

#Initialize and constants

load_dotenv()
os.environ['OPENAI_API_KEY'] = os.getenv('OPENAI_API_KEY', '
MODEL = 'gpt-4o-mini'
openai = OpenAI()

# A class to represent a Webpage
from typing import List #Import List here


class Website:
    url: str
    title: str
    body: str
    links: List[str]

    def __init__(self, url):  # Corrected '__innir__' to "__init__"
        self.url = url
        response = requests.get(url)
        self.body = response.content
        soup = BeautifulSoup(self.body, 'html.parser')
        self.title = soup.title.string if soup.title else "No Title Found"
        if soup.body:
            for irrelevant in soup.body(["script", "style", "img", "imput"]):
                irrelevant.decompose()
            self.text = soup.body.get_text(separator="\n", strip=True)
        else:  # Corrected indentation here
            self.text = ""
        Links = [link.get('href') for link in soup.find_all('a')]
        self.links = [link for link in Links if link]

    def get_contents(self): #Corrected to get_contents
        return f"webpage Title:\n{self.title}\nWebpage Contents:\n{self.text}\n\n"

# ipython-input-19-8e37d6a3e2d4
ed = Website("https://www.nike.com")  # Corrected the URL to 'https://www.walmart.com'
print(ed.get_contents())

link_system_prompt = "You are provided with a list of links found on a webpage.\
You are able to decide which of the links would be most relevant to include in a brochure about the company, \
such as links to an About page, or a Company page, or Careers/Jobs pages.\n"
link_system_prompt += """"
{
  "links": [
    {"type": "about page", "url": "https://www.nike.com/about"},
    {"type": "company page", "url": "https://www.nike.com/company"},
  ]
}
"""


def get_links_user_prompt(website):
    user_prompt = f"Here is the list of links on the website {'https://www.nike.com'} - "
    user_prompt += "please decide which of these are relevant links for a brochure about the company, respond with the full https Url. Do not include terms of service, privacy, email links.\n"
    user_prompt += "Links (some might be relative links):\n"
    user_prompt += "\n".join(website.links)
    return user_prompt

print(get_links_user_prompt(ed))

def get_links(url):
    website = Website(url)
def get_links(url):
    website = Website(url)
    completion = openai.chat.completions.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": link_system_prompt},
            {"role": "user", "content": get_links_user_prompt(website)}
        ],
        response_format={"type": "json_object"}
    )
    result = completion.choices[0].message.content
    return json.loads(result)

import os

# Replace 'your_actual_api_key' with your OpenAI API key
os.environ['OPENAI_API_KEY'] = 'your_actual_api_key'

import openai

openai.api_key = ""  # Replace with your actual key

def get_all_details(url):
    result = "landing page:\n"
    website = Website(url)
    result += website.get_contents()
    links = get_links(url)
    print("Found links:")
    for link in links["links"]:
        print(link["url"])
        result += Website(link["url"]).get_contents()
    return result
