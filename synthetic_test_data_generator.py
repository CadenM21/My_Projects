# -*- coding: utf-8 -*-
"""synthetic test data generator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fxtf_RdyjdTz8L9IGSIFLpSvfrlsQmYY

# Step 1: Set up the environment
First, ensure you have the required libraries installed. You can install them using pip if you havenâ€™t done so already:
"""

pip install pandas numpy faker matplotlib

"""# Step 2: Import the libraries
Now, let's import the necessary libraries to begin generating and analyzing synthetic data:
"""

import pandas as pd
import numpy as np
from faker import Faker
import matplotlib.pyplot as plt

"""Step 3: Define the structure of synthetic data
Suppose we want to generate synthetic customer data for testing AI models. The data will include:

customer_id: A unique identifier for each customer.

name: Customer's full name.

age: Customer's age.

email: Customer's email address.

phone: Customer's phone number.

address: Customer's address.

annual_income: Customer's annual income (in USD).

subscription_type: Type of subscription (Basic, Premium, or VIP).

We will generate 1000 rows of this synthetic customer data.

# Step 4: Generate the synthetic data
We can use the Faker library to generate fake names, emails, phone numbers, and addresses. For structured data (like age and annual income), we will use numpy to generate random values.
"""

# Initialize the Faker object to generate fake data
fake = Faker()

# Function to generate synthetic data
def generate_synthetic_data(num_rows):
    data = []

    for _ in range(num_rows):
        # Generate basic customer details
        customer_id = fake.uuid4()  # Unique customer ID
        name = fake.name()  # Fake name
        email = fake.email()  # Fake email
        phone = fake.phone_number()  # Fake phone number
        address = fake.address()  # Fake address

        # Generate random data for numerical columns
        age = np.random.randint(18, 70)  # Random age between 18 and 70
        annual_income = np.random.randint(30000, 150000)  # Annual income between 30k and 150k

        # Random subscription type (Basic, Premium, VIP)
        subscription_type = np.random.choice(['Basic', 'Premium', 'VIP'])

        # Create a row for the customer data
        customer_data = {
            'customer_id': customer_id,
            'name': name,
            'age': age,
            'email': email,
            'phone': phone,
            'address': address,
            'annual_income': annual_income,
            'subscription_type': subscription_type
        }

        data.append(customer_data)

    # Return the data as a pandas DataFrame
    return pd.DataFrame(data)

# Generate 1000 rows of synthetic data
num_rows = 1000
synthetic_data = generate_synthetic_data(num_rows)

# Display the first 5 rows of the generated data
print(synthetic_data.head())

"""# Step 5: Visualize the data with matplotlib
Once we have generated the synthetic data, we can use matplotlib to visualize the distribution of certain columns, such as age and annual_income. This will help us understand how the synthetic data looks.

# Visualizing the age distribution
"""

# Plotting the distribution of age
plt.figure(figsize=(8, 6))
plt.hist(synthetic_data['age'], bins=20, color='skyblue', edgecolor='black')
plt.title('Age Distribution of Customers')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

"""# Visualizing the annual_income distribution"""

# Plotting the distribution of annual income
plt.figure(figsize=(8, 6))
plt.hist(synthetic_data['annual_income'], bins=30, color='green', edgecolor='black')
plt.title('Annual Income Distribution of Customers')
plt.xlabel('Annual Income (USD)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

"""# Visualizing the subscription types
You can also visualize the distribution of subscription types:
"""

# Plotting the distribution of subscription types
plt.figure(figsize=(8, 6))
subscription_counts = synthetic_data['subscription_type'].value_counts()
plt.bar(subscription_counts.index, subscription_counts.values, color='purple')
plt.title('Subscription Type Distribution')
plt.xlabel('Subscription Type')
plt.ylabel('Frequency')
plt.show()

# Save the synthetic data to a CSV file
synthetic_data.to_csv('synthetic_customer_data.csv', index=False)

print("Synthetic data saved to 'synthetic_customer_data.csv'")